// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Sumo Logic and manual
//     changes will be clobbered when the file is regenerated. Do not submit
//     changes to this file.
//
// ----------------------------------------------------------------------------\
package sumologic

import (
	"log"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
)

func resourceSumologicFieldExtractionRule() *schema.Resource {
	return &schema.Resource{
		Create: resourceSumologicFieldExtractionRuleCreate,
		Read:   resourceSumologicFieldExtractionRuleRead,
		Update: resourceSumologicFieldExtractionRuleUpdate,
		Delete: resourceSumologicFieldExtractionRuleDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},

		Schema: map[string]*schema.Schema{
			"name": {
				Type:     schema.TypeString,
				Required: true,
			},
			"scope": {
				Type:     schema.TypeString,
				Required: true,
			},
			"parse_expression": {
				Type:     schema.TypeString,
				Required: true,
			},
			"enabled": {
				Type:     schema.TypeBool,
				Required: true,
			},
		},
	}
}

func resourceSumologicFieldExtractionRuleRead(d *schema.ResourceData, meta interface{}) error {
	c := meta.(*Client)

	id := d.Id()
	fieldextractionrule, err := c.GetFieldExtractionRule(id)

	if err != nil {
		return err
	}

	if fieldextractionrule == nil {
		log.Printf("[WARN] FieldExtractionRule not found, removing from state: %v - %v", id, err)
		d.SetId("")
		return nil
	}

	d.Set("name", fieldextractionrule.Name)
	d.Set("scope", fieldextractionrule.Scope)
	d.Set("parse_expression", fieldextractionrule.ParseExpression)
	d.Set("enabled", fieldextractionrule.Enabled)

	return nil
}

func resourceSumologicFieldExtractionRuleDelete(d *schema.ResourceData, meta interface{}) error {
	c := meta.(*Client)
	return c.DeleteFieldExtractionRule(d.Id())
}

func resourceSumologicFieldExtractionRuleCreate(d *schema.ResourceData, meta interface{}) error {
	c := meta.(*Client)

	if d.Id() == "" {
		fieldextractionrule := resourceToFieldExtractionRule(d)
		id, err := c.CreateFieldExtractionRule(fieldextractionrule)

		if err != nil {
			return err
		}

		d.SetId(id)
	}

	return resourceSumologicFieldExtractionRuleRead(d, meta)
}

func resourceSumologicFieldExtractionRuleUpdate(d *schema.ResourceData, meta interface{}) error {
	c := meta.(*Client)

	fieldextractionrule := resourceToFieldExtractionRule(d)

	err := c.UpdateFieldExtractionRule(fieldextractionrule)

	if err != nil {
		return err
	}

	return resourceSumologicFieldExtractionRuleRead(d, meta)
}

func resourceToFieldExtractionRule(d *schema.ResourceData) FieldExtractionRule {

	return FieldExtractionRule{
		ID:              d.Id(),
		Name:            d.Get("name").(string),
		Scope:           d.Get("scope").(string),
		ParseExpression: d.Get("parse_expression").(string),
		Enabled:         d.Get("enabled").(bool),
	}
}
