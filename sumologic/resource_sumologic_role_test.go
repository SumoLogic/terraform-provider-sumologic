// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Sumo Logic and manual
//     changes will be clobbered when the file is regenerated. Do not submit
//     changes to this file.
//
// ----------------------------------------------------------------------------\
package sumologic

import (
	"fmt"
	"strconv"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/helper/acctest"
	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/terraform"
)

func TestAccSumologicRole_basic(t *testing.T) {
	var role Role
	testName := acctest.RandomWithPrefix("tf-acc-test")
	testDescription := FieldsMap["Role"]["description"]
	testFilterPredicate := FieldsMap["Role"]["filterPredicate"]
	testCapabilities := []string{"\"" + FieldsMap["Role"]["capabilities"] + "\""}

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckRoleDestroy(role),
		Steps: []resource.TestStep{
			{
				Config: testAccCheckSumologicRoleConfigImported(testName, testDescription, testFilterPredicate, testCapabilities),
			},
			{
				ResourceName:      "sumologic_role.foo",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccSumologicRole_create(t *testing.T) {
	var role Role
	testName := acctest.RandomWithPrefix("tf-acc-test")
	testDescription := FieldsMap["Role"]["description"]
	testFilterPredicate := FieldsMap["Role"]["filterPredicate"]
	testCapabilities := []string{"\"" + FieldsMap["Role"]["capabilities"] + "\""}
	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckRoleDestroy(role),
		Steps: []resource.TestStep{
			{
				Config: testAccSumologicRole(testName, testDescription, testFilterPredicate, testCapabilities),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckRoleExists("sumologic_role.test", &role, t),
					testAccCheckRoleAttributes("sumologic_role.test"),
					resource.TestCheckResourceAttr("sumologic_role.test", "name", testName),
					resource.TestCheckResourceAttr("sumologic_role.test", "description", testDescription),
					resource.TestCheckResourceAttr("sumologic_role.test", "filter_predicate", testFilterPredicate),
					resource.TestCheckResourceAttr("sumologic_role.test", "capabilities.#", fmt.Sprint(len(testCapabilities))),
				),
			},
		},
	})
}

func testAccCheckRoleDestroy(role Role) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		client := testAccProvider.Meta().(*Client)
		for _, r := range s.RootModule().Resources {
			id := r.Primary.ID
			u, err := client.GetRole(id)
			if err != nil {
				return fmt.Errorf("Encountered an error: " + err.Error())
			}
			if u != nil {
				return fmt.Errorf("Role still exists")
			}
		}
		return nil
	}
}

func testAccCheckRoleExists(name string, role *Role, t *testing.T) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		rs, ok := s.RootModule().Resources[name]
		if !ok {
			//need this so that we don't get an unused import error for strconv in some cases
			return fmt.Errorf("Error = %s. Role not found: %s", strconv.FormatBool(ok), name)
		}

		//need this so that we don't get an unused import error for strings in some cases
		if strings.EqualFold(rs.Primary.ID, "") {
			return fmt.Errorf("Role ID is not set")
		}

		id := rs.Primary.ID
		c := testAccProvider.Meta().(*Client)
		newRole, err := c.GetRole(id)
		if err != nil {
			return fmt.Errorf("Role %s not found", id)
		}
		role = newRole
		return nil
	}
}

func TestAccSumologicRole_update(t *testing.T) {
	var role Role
	testName := acctest.RandomWithPrefix("tf-acc-test")
	testDescription := FieldsMap["Role"]["description"]
	testFilterPredicate := FieldsMap["Role"]["filterPredicate"]
	testCapabilities := []string{"\"" + FieldsMap["Role"]["capabilities"] + "\""}

	testUpdatedName := acctest.RandomWithPrefix("tf-acc-test")
	testUpdatedDescription := FieldsMap["Role"]["updatedDescription"]
	testUpdatedFilterPredicate := FieldsMap["Role"]["updatedFilterPredicate"]
	testUpdatedCapabilities := []string{"\"" + FieldsMap["Role"]["updatedCapabilities"] + "\""}

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckRoleDestroy(role),
		Steps: []resource.TestStep{
			{
				Config: testAccSumologicRole(testName, testDescription, testFilterPredicate, testCapabilities),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckRoleExists("sumologic_role.test", &role, t),
					testAccCheckRoleAttributes("sumologic_role.test"),
					resource.TestCheckResourceAttr("sumologic_role.test", "name", testName),
					resource.TestCheckResourceAttr("sumologic_role.test", "description", testDescription),
					resource.TestCheckResourceAttr("sumologic_role.test", "filter_predicate", testFilterPredicate),
					resource.TestCheckResourceAttr("sumologic_role.test", "capabilities.#", fmt.Sprint(len(testCapabilities))),
				),
			},
			{
				Config: testAccSumologicRoleUpdate(testUpdatedName, testUpdatedDescription, testUpdatedFilterPredicate, testUpdatedCapabilities),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckRoleExists("sumologic_role.test", &role, t),
					testAccCheckRoleAttributes("sumologic_role.test"),
					resource.TestCheckResourceAttr("sumologic_role.test", "name", testUpdatedName),
					resource.TestCheckResourceAttr("sumologic_role.test", "description", testUpdatedDescription),
					resource.TestCheckResourceAttr("sumologic_role.test", "filter_predicate", testUpdatedFilterPredicate),
					resource.TestCheckResourceAttr("sumologic_role.test", "capabilities.#", fmt.Sprint(len(testCapabilities))),
				),
			},
		},
	})
}

func testAccCheckSumologicRoleConfigImported(name string, description string, filterPredicate string, capabilities []string) string {
	return fmt.Sprintf(`
resource "sumologic_role" "foo" {
      name = "%s"
      description = "%s"
      filter_predicate = "%s"
      capabilities = %v
}
`, name, description, filterPredicate, capabilities)
}

func testAccSumologicRole(name string, description string, filterPredicate string, capabilities []string) string {
	return fmt.Sprintf(`
resource "sumologic_role" "test" {
    name = "%s"
    description = "%s"
    filter_predicate = "%s"
    capabilities = %v
}
`, name, description, filterPredicate, capabilities)
}

func testAccSumologicRoleUpdate(name string, description string, filterPredicate string, capabilities []string) string {
	return fmt.Sprintf(`
resource "sumologic_role" "test" {
      name = "%s"
      description = "%s"
      filter_predicate = "%s"
      capabilities = %v
}
`, name, description, filterPredicate, capabilities)
}

func testAccCheckRoleAttributes(name string) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		f := resource.ComposeTestCheckFunc(
			resource.TestCheckResourceAttrSet(name, "name"),
			resource.TestCheckResourceAttrSet(name, "description"),
			resource.TestCheckResourceAttrSet(name, "filter_predicate"),
		)
		return f(s)
	}
}
