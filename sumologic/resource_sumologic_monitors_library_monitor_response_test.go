// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Sumo Logic and manual
//     changes will be clobbered when the file is regenerated. Do not submit
//     changes to this file.
//
// ----------------------------------------------------------------------------
package sumologic

import (
	"fmt"
	"testing"
  "strconv"
  "strings"
	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/terraform"
)
func TestAccSumologicMonitorsLibraryMonitorResponse_basic(t *testing.T) {
	var monitorsLibraryMonitorResponse MonitorsLibraryMonitorResponse
	testModifiedAt := "2020-06-30T18:28:29Z"
  testCreatedBy := "iWGG>c/bI7"
  testIsLocked := false
  testMonitorType := "ioWj\g\1a?"
  testIsSystem := false
  testName := ".fgma5=(7&"
  testParentId := "[6W\U1b0NI"
  testNotifications := []string{"E0-_X&e]R;"}
  testType := "I)]8#a!d$%"
  testVersion := 0
  testIsMutable := false
  testTriggers := []string{"jU-e;ES##9"}
  testQueries := []string{"\"$;B&|;c8\""}
  testDescription := "Nrn}7CD\Cm"
  testModifiedBy := "S4s,z+9R44"
  testCreatedAt := "2020-06-30T18:28:29Z"
  testContentType := "gy{TtNG{i5"

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckMonitorsLibraryMonitorResponseDestroy(monitorsLibraryMonitorResponse),
		Steps: []resource.TestStep{
			{
				Config: testAccCheckSumologicMonitorsLibraryMonitorResponseConfigImported(testModifiedAt, testCreatedBy, testIsLocked, testMonitorType, testIsSystem, testName, testParentId, testNotifications, testType, testVersion, testIsMutable, testTriggers, testQueries, testDescription, testModifiedBy, testCreatedAt, testContentType),
			},
			{
				ResourceName:      "sumologic_monitors_library_monitor_response.foo",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}
func TestAccMonitorsLibraryMonitorResponse_create(t *testing.T) {
  var monitorsLibraryMonitorResponse MonitorsLibraryMonitorResponse
  testModifiedAt := "2020-06-30T18:28:29Z"
  testCreatedBy := "l2i8\"a+%8R"
  testIsLocked := false
  testMonitorType := "PAK#1\tXbt"
  testIsSystem := false
  testName := "(wjP4SP7qH"
  testParentId := "\h(lF-:4&!"
  testNotifications := []string{"\3y+72%zl#"}
  testType := "^4/8sbNdpm"
  testVersion := 0
  testIsMutable := false
  testTriggers := []string{"|:]<0]rBeF"}
  testQueries := []string{"PH^0?*aeBz"}
  testDescription := "3;X~=;t40+"
  testModifiedBy := "0b=)N_%QVj"
  testCreatedAt := "2020-06-30T18:28:29Z"
  testContentType := "3}E/kuj)GZ"
  resource.Test(t, resource.TestCase{
    PreCheck: func() { testAccPreCheck(t) },
    Providers:    testAccProviders,
    CheckDestroy: testAccCheckMonitorsLibraryMonitorResponseDestroy(monitorsLibraryMonitorResponse),
    Steps: []resource.TestStep{
      {
        Config: testAccSumologicMonitorsLibraryMonitorResponse(testModifiedAt, testCreatedBy, testIsLocked, testMonitorType, testIsSystem, testName, testParentId, testNotifications, testType, testVersion, testIsMutable, testTriggers, testQueries, testDescription, testModifiedBy, testCreatedAt, testContentType),
        Check: resource.ComposeTestCheckFunc(
          testAccCheckMonitorsLibraryMonitorResponseExists("sumologic_monitors_library_monitor_response.test", &monitorsLibraryMonitorResponse, t),
          testAccCheckMonitorsLibraryMonitorResponseAttributes("sumologic_monitors_library_monitor_response.test"),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "modified_at", testModifiedAt),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "created_by", testCreatedBy),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "is_locked", strconv.FormatBool(testIsLocked)),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "monitor_type", testMonitorType),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "is_system", strconv.FormatBool(testIsSystem)),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "name", testName),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "parent_id", testParentId),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "notifications.0", strings.Replace(testNotifications[0], "\"", "", 2)),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "type", testType),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "version", strconv.Itoa(testVersion)),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "is_mutable", strconv.FormatBool(testIsMutable)),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "triggers.0", strings.Replace(testTriggers[0], "\"", "", 2)),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "queries.0", strings.Replace(testQueries[0], "\"", "", 2)),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "description", testDescription),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "modified_by", testModifiedBy),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "created_at", testCreatedAt),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "content_type", testContentType),
        ),
      },
    },
  })
}

func testAccCheckMonitorsLibraryMonitorResponseDestroy(monitorsLibraryMonitorResponse MonitorsLibraryMonitorResponse) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		client := testAccProvider.Meta().(*Client)
    for _, r := range s.RootModule().Resources {
      id := r.Primary.ID
		  u, err := client.GetMonitorsLibraryMonitorResponse(id)
		  if err != nil {
        return fmt.Errorf("Encountered an error: " + err.Error())
		  }
      if u != nil {
        return fmt.Errorf("MonitorsLibraryMonitorResponse still exists")
      }
    }
		return nil
	}
}
func testAccCheckMonitorsLibraryMonitorResponseExists(name string, monitorsLibraryMonitorResponse *MonitorsLibraryMonitorResponse, t *testing.T) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		rs, ok := s.RootModule().Resources[name]
		if !ok {
      //need this so that we don't get an unused import error for strconv in some cases
			return fmt.Errorf("Error = %s. MonitorsLibraryMonitorResponse not found: %s", strconv.FormatBool(ok), name)
		}

    //need this so that we don't get an unused import error for strings in some cases
		if strings.EqualFold(rs.Primary.ID, "") {
			return fmt.Errorf("MonitorsLibraryMonitorResponse ID is not set")
		}

		id := rs.Primary.ID
		c := testAccProvider.Meta().(*Client)
		newMonitorsLibraryMonitorResponse, err := c.GetMonitorsLibraryMonitorResponse(id)
		if err != nil {
			return fmt.Errorf("MonitorsLibraryMonitorResponse %s not found", id)
		}
		monitorsLibraryMonitorResponse = newMonitorsLibraryMonitorResponse
		return nil
	}
}

func TestAccMonitorsLibraryMonitorResponse_update(t *testing.T) {
  var monitorsLibraryMonitorResponse MonitorsLibraryMonitorResponse
  testModifiedAt := "2020-06-30T18:28:29Z"
  testCreatedBy := "8LV'-hO(Mm"
  testIsLocked := false
  testMonitorType := "O(^<f[H}$;"
  testIsSystem := false
  testName := "-<Kv_Ux=@O"
  testParentId := "k=eS|jtGez"
  testNotifications := []string{"_=XK!>l6-|"}
  testType := "fK$|KEWW>%"
  testVersion := 0
  testIsMutable := false
  testTriggers := []string{";-UCu\*wTX"}
  testQueries := []string{"R.$97\"\ytg"}
  testDescription := "E.5QWRLQ5/"
  testModifiedBy := "@7o*K=0SWx"
  testCreatedAt := "2020-06-30T18:28:29Z"
  testContentType := "4.=(74\"(;I"

  testUpdatedModifiedAt := "2020-06-30T18:28:29ZUpdate"
  testUpdatedCreatedBy := "-fIEELNh<TUpdate"
  testUpdatedIsLocked := false
  testUpdatedMonitorType := "Lk_C\}@a3^Update"
  testUpdatedIsSystem := false
  testUpdatedName := "+YmaPa_^zTUpdate"
  testUpdatedParentId := "-[.}x\"?<KMUpdate"
  testUpdatedNotifications := []string{"ynuv~vZ\Lc"}
  testUpdatedType := "|}uqzneQ$TUpdate"
  testUpdatedVersion := 1
  testUpdatedIsMutable := false
  testUpdatedTriggers := []string{"m+gSJLFyS="}
  testUpdatedQueries := []string{"0r%Z}+1pik"}
  testUpdatedDescription := "-=DXxO|ii)Update"
  testUpdatedModifiedBy := "F\"w;iL+_kgUpdate"
  testUpdatedCreatedAt := "2020-06-30T18:28:29ZUpdate"
  testUpdatedContentType := ";)N^;&)PS/Update"

	resource.Test(t, resource.TestCase{
		PreCheck: func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckMonitorsLibraryMonitorResponseDestroy(monitorsLibraryMonitorResponse),
		Steps: []resource.TestStep{
			{
				Config: testAccSumologicMonitorsLibraryMonitorResponse(testModifiedAt, testCreatedBy, testIsLocked, testMonitorType, testIsSystem, testName, testParentId, testNotifications, testType, testVersion, testIsMutable, testTriggers, testQueries, testDescription, testModifiedBy, testCreatedAt, testContentType),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckMonitorsLibraryMonitorResponseExists("sumologic_monitors_library_monitor_response.test", &monitorsLibraryMonitorResponse, t),
					testAccCheckMonitorsLibraryMonitorResponseAttributes("sumologic_monitors_library_monitor_response.test"),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "modified_at", testModifiedAt),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "created_by", testCreatedBy),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "is_locked", strconv.FormatBool(testIsLocked)),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "monitor_type", testMonitorType),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "is_system", strconv.FormatBool(testIsSystem)),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "name", testName),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "parent_id", testParentId),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "notifications.0", strings.Replace(testNotifications[0], "\"", "", 2)),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "type", testType),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "version", strconv.Itoa(testVersion)),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "is_mutable", strconv.FormatBool(testIsMutable)),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "triggers.0", strings.Replace(testTriggers[0], "\"", "", 2)),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "queries.0", strings.Replace(testQueries[0], "\"", "", 2)),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "description", testDescription),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "modified_by", testModifiedBy),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "created_at", testCreatedAt),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "content_type", testContentType),
				),
			},
			{
				Config: testAccSumologicMonitorsLibraryMonitorResponseUpdate(testUpdatedModifiedAt, testUpdatedCreatedBy, testUpdatedIsLocked, testUpdatedMonitorType, testUpdatedIsSystem, testUpdatedName, testUpdatedParentId, testUpdatedNotifications, testUpdatedType, testUpdatedVersion, testUpdatedIsMutable, testUpdatedTriggers, testUpdatedQueries, testUpdatedDescription, testUpdatedModifiedBy, testUpdatedCreatedAt, testUpdatedContentType),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "modified_at", testUpdatedModifiedAt),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "created_by", testUpdatedCreatedBy),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "is_locked", strconv.FormatBool(testUpdatedIsLocked)),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "monitor_type", testUpdatedMonitorType),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "is_system", strconv.FormatBool(testUpdatedIsSystem)),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "name", testUpdatedName),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "parent_id", testUpdatedParentId),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "notifications.0", strings.Replace(testUpdatedNotifications[0], "\"", "", 2)),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "type", testUpdatedType),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "version", strconv.Itoa(testUpdatedVersion)),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "is_mutable", strconv.FormatBool(testUpdatedIsMutable)),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "triggers.0", strings.Replace(testUpdatedTriggers[0], "\"", "", 2)),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "queries.0", strings.Replace(testUpdatedQueries[0], "\"", "", 2)),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "description", testUpdatedDescription),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "modified_by", testUpdatedModifiedBy),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "created_at", testUpdatedCreatedAt),
          resource.TestCheckResourceAttr("sumologic_monitors_library_monitor_response.test", "content_type", testUpdatedContentType),
				),
			},
		},
	})
}
func testAccCheckSumologicMonitorsLibraryMonitorResponseConfigImported(modifiedAt string, createdBy string, isLocked bool, monitorType string, isSystem bool, name string, parentId string, notifications []string, type_field string, version int, isMutable bool, triggers []string, queries []string, description string, modifiedBy string, createdAt string, contentType string) string {
	return fmt.Sprintf(`
resource "sumologic_monitors_library_monitor_response" "foo" {
      modified_at = "%s"
      created_by = "%s"
      is_locked = %t
      monitor_type = "%s"
      is_system = %t
      name = "%s"
      parent_id = "%s"
      notifications = %v
      type = "%s"
      version = %d
      is_mutable = %t
      triggers = %v
      queries = %v
      description = "%s"
      modified_by = "%s"
      created_at = "%s"
      content_type = "%s"
}
`, modifiedAt, createdBy, isLocked, monitorType, isSystem, name, parentId, notifications, type_field, version, isMutable, triggers, queries, description, modifiedBy, createdAt, contentType)
}

func testAccSumologicMonitorsLibraryMonitorResponse(modifiedAt string, createdBy string, isLocked bool, monitorType string, isSystem bool, name string, parentId string, notifications []string, type_field string, version int, isMutable bool, triggers []string, queries []string, description string, modifiedBy string, createdAt string, contentType string) string {
	return fmt.Sprintf(`
resource "sumologic_monitors_library_monitor_response" "test" {
    modified_at = "%s"
    created_by = "%s"
    is_locked = %t
    monitor_type = "%s"
    is_system = %t
    name = "%s"
    parent_id = "%s"
    notifications = %v
    type = "%s"
    version = %d
    is_mutable = %t
    triggers = %v
    queries = %v
    description = "%s"
    modified_by = "%s"
    created_at = "%s"
    content_type = "%s"
}
`, modifiedAt, createdBy, isLocked, monitorType, isSystem, name, parentId, notifications, type_field, version, isMutable, triggers, queries, description, modifiedBy, createdAt, contentType)
}

func testAccSumologicMonitorsLibraryMonitorResponseUpdate(modifiedAt string, createdBy string, isLocked bool, monitorType string, isSystem bool, name string, parentId string, notifications []string, type_field string, version int, isMutable bool, triggers []string, queries []string, description string, modifiedBy string, createdAt string, contentType string) string {
	return fmt.Sprintf(`
resource "sumologic_monitors_library_monitor_response" "test" {
      modified_at = "%s"
      created_by = "%s"
      is_locked = %t
      monitor_type = "%s"
      is_system = %t
      name = "%s"
      parent_id = "%s"
      notifications = %v
      type = "%s"
      version = %d
      is_mutable = %t
      triggers = %v
      queries = %v
      description = "%s"
      modified_by = "%s"
      created_at = "%s"
      content_type = "%s"
}
`, modifiedAt, createdBy, isLocked, monitorType, isSystem, name, parentId, notifications, type_field, version, isMutable, triggers, queries, description, modifiedBy, createdAt, contentType)
}

func testAccCheckMonitorsLibraryMonitorResponseAttributes(name string) resource.TestCheckFunc {
  return func(s *terraform.State) error {
      f := resource.ComposeTestCheckFunc(
        resource.TestCheckResourceAttrSet(name, "modified_at"),
        resource.TestCheckResourceAttrSet(name, "created_by"),
        resource.TestCheckResourceAttrSet(name, "is_locked"),
        resource.TestCheckResourceAttrSet(name, "monitor_type"),
        resource.TestCheckResourceAttrSet(name, "is_system"),
        resource.TestCheckResourceAttrSet(name, "name"),
        resource.TestCheckResourceAttrSet(name, "parent_id"),
        resource.TestCheckResourceAttrSet(name, "notifications"),
        resource.TestCheckResourceAttrSet(name, "type"),
        resource.TestCheckResourceAttrSet(name, "version"),
        resource.TestCheckResourceAttrSet(name, "is_mutable"),
        resource.TestCheckResourceAttrSet(name, "triggers"),
        resource.TestCheckResourceAttrSet(name, "queries"),
        resource.TestCheckResourceAttrSet(name, "description"),
        resource.TestCheckResourceAttrSet(name, "modified_by"),
        resource.TestCheckResourceAttrSet(name, "created_at"),
        resource.TestCheckResourceAttrSet(name, "content_type"),
      )
      return f(s)
   }
}