// ---------- BEGIN MonitorsLibraryMonitor ----------
// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Sumo Logic and manual
//     changes will be clobbered when the file is regenerated. Do not submit
//     changes to this file.
//
// ----------------------------------------------------------------------------
package sumologic

import (
	"encoding/json"
	"fmt"
)

// ---------- ENDPOINTS ----------

func (s *Client) CreateMonitorsLibraryMonitor(monitorsLibraryMonitor MonitorsLibraryMonitor, paramMap map[string]string) (string, error) {
	urlWithoutParams := "v1/monitors"
	paramString := ""
	sprintfArgs := []interface{}{}

	paramString += "?"

	if val, ok := paramMap["parentId"]; ok {
		queryParam := fmt.Sprintf("parentId=%s&", val)
		paramString += queryParam
	}

	urlWithParams := fmt.Sprintf(urlWithoutParams+paramString, sprintfArgs...)

	data, err := s.Post(urlWithParams, monitorsLibraryMonitor)
	if err != nil {
		return "", err
	}

	var createdMonitorsLibraryMonitor MonitorsLibraryMonitor

	err = json.Unmarshal(data, &createdMonitorsLibraryMonitor)
	if err != nil {
		return "", err
	}

	return createdMonitorsLibraryMonitor.ID, nil

}

func (s *Client) MonitorsRead(id string) (*MonitorsLibraryMonitor, error) {
	urlWithoutParams := "v1/monitors/%s"
	paramString := ""
	sprintfArgs := []interface{}{}
	sprintfArgs = append(sprintfArgs, id)

	urlWithParams := fmt.Sprintf(urlWithoutParams+paramString, sprintfArgs...)

	data, _, err := s.Get(urlWithParams)
	if err != nil {
		return nil, err
	}
	if data == nil {
		return nil, nil
	}

	var monitorsLibraryMonitor MonitorsLibraryMonitor

	err = json.Unmarshal(data, &monitorsLibraryMonitor)

	if err != nil {
		return nil, err
	}

	return &monitorsLibraryMonitor, nil

}

func (s *Client) DeleteMonitorsLibraryMonitor(id string) error {
	urlWithoutParams := "v1/monitors/%s"
	paramString := ""
	sprintfArgs := []interface{}{}
	sprintfArgs = append(sprintfArgs, id)

	urlWithParams := fmt.Sprintf(urlWithoutParams+paramString, sprintfArgs...)

	_, err := s.Delete(urlWithParams)

	return err
}

func (s *Client) UpdateMonitorsLibraryMonitor(monitorsLibraryMonitor MonitorsLibraryMonitor) error {
	urlWithoutParams := "v1/monitors/%s"
	paramString := ""
	sprintfArgs := []interface{}{}
	sprintfArgs = append(sprintfArgs, monitorsLibraryMonitor.ID)

	urlWithParams := fmt.Sprintf(urlWithoutParams+paramString, sprintfArgs...)

	monitorsLibraryMonitor.ID = ""

	_, err := s.Put(urlWithParams, monitorsLibraryMonitor)

	return err

}

// ---------- TYPES ----------
type MonitorsLibraryMonitor struct {
	ID            string   `json:"id,omitempty"`
	IsSystem      bool     `json:"isSystem"`
	Type          string   `json:"type"`
	Queries       []string `json:"queries,omitempty"`
	ParentId      string   `json:"parentId"`
	Name          string   `json:"name"`
	IsMutable     bool     `json:"isMutable"`
	Version       int      `json:"version"`
	Notifications []string `json:"notifications,omitempty"`
	CreatedBy     string   `json:"createdBy"`
	MonitorType   string   `json:"monitorType"`
	IsLocked      bool     `json:"isLocked"`
	Description   string   `json:"description"`
	CreatedAt     string   `json:"createdAt"`
	Triggers      []string `json:"triggers,omitempty"`
	ModifiedAt    string   `json:"modifiedAt"`
	ContentType   string   `json:"contentType"`
	ModifiedBy    string   `json:"modifiedBy"`
}

// ---------- END ----------
