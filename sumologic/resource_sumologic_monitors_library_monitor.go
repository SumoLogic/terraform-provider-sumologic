// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Sumo Logic and manual
//     changes will be clobbered when the file is regenerated. Do not submit
//     changes to this file.
//
// ----------------------------------------------------------------------------
package sumologic

import (
	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
)

func resourceSumologicMonitorsLibraryMonitor() *schema.Resource {
	return &schema.Resource{
		Create: resourceSumologicMonitorsLibraryMonitorCreate,
		Read:   resourceSumologicMonitorsLibraryMonitorRead,
		Update: resourceSumologicMonitorsLibraryMonitorUpdate,
		Delete: resourceSumologicMonitorsLibraryMonitorDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},

		Schema: map[string]*schema.Schema{

			"version": {
				Type:     schema.TypeInt,
				Required: true,
				ForceNew: false,
			},

			"modified_at": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: false,
			},

			"is_system": {
				Type:     schema.TypeBool,
				Required: true,
				ForceNew: false,
			},

			"content_type": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: false,
			},

			"queries": {
				Type:     schema.TypeList,
				Optional: true,
				ForceNew: false,

				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"created_by": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: false,
			},

			"parent_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: false,
			},

			"is_mutable": {
				Type:     schema.TypeBool,
				Required: true,
				ForceNew: false,
			},

			"triggers": {
				Type:     schema.TypeList,
				Optional: true,
				ForceNew: false,

				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"notifications": {
				Type:     schema.TypeList,
				Optional: true,
				ForceNew: false,

				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"description": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: false,
			},

			"created_at": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: false,
			},

			"monitor_type": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: false,
			},

			"is_locked": {
				Type:     schema.TypeBool,
				Required: true,
				ForceNew: false,
			},

			"type": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: false,
			},

			"modified_by": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: false,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: false,
			},
			"post_request_map": {
				Type:     schema.TypeMap,
				Optional: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
		},
	}
}

func resourceToMonitorsLibraryMonitor(d *schema.ResourceData) MonitorsLibraryMonitor {
	rawNotifications := d.Get("notifications").([]interface{})
	notifications := make([]string, len(rawNotifications))
	for i, v := range rawNotifications {
		notifications[i] = v.(string)
	}
	rawTriggers := d.Get("triggers").([]interface{})
	triggers := make([]string, len(rawTriggers))
	for i, v := range rawTriggers {
		triggers[i] = v.(string)
	}
	rawQueries := d.Get("queries").([]interface{})
	queries := make([]string, len(rawQueries))
	for i, v := range rawQueries {
		queries[i] = v.(string)
	}

	return MonitorsLibraryMonitor{
		CreatedBy:     d.Get("created_by").(string),
		Name:          d.Get("name").(string),
		ID:            d.Id(),
		CreatedAt:     d.Get("created_at").(string),
		MonitorType:   d.Get("monitor_type").(string),
		Description:   d.Get("description").(string),
		Queries:       queries,
		ModifiedBy:    d.Get("modified_by").(string),
		IsMutable:     d.Get("is_mutable").(bool),
		Version:       d.Get("version").(int),
		Notifications: notifications,
		Type:          d.Get("type").(string),
		ParentId:      d.Get("parent_id").(string),
		ModifiedAt:    d.Get("modified_at").(string),
		Triggers:      triggers,
		ContentType:   d.Get("content_type").(string),
		IsLocked:      d.Get("is_locked").(bool),
		IsSystem:      d.Get("is_system").(bool),
	}
}
